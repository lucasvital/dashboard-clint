/**
 * Script alternativo de configura√ß√£o do Clint Dashboard
 * Configura√ß√£o completa que instala Node.js, npm e depend√™ncias em uma VPS virgem
 */

const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const readline = require('readline');
const util = require('util');
const execPromise = util.promisify(exec);

// Configura√ß√£o das perguntas interativas
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Promisificar a fun√ß√£o de pergunta
function pergunta(questao) {
  return new Promise((resolve) => {
    rl.question(questao, (resposta) => {
      resolve(resposta);
    });
  });
}

console.log('üöÄ Iniciando configura√ß√£o completa do Sistema Clint');

// Fun√ß√£o para executar comando com output em tempo real
function executarComando(comando, cwd = __dirname) {
  return new Promise((resolve, reject) => {
    console.log(`Executando: ${comando}`);
    
    const childProcess = spawn(comando, {
      shell: true,
      cwd,
      stdio: 'inherit'
    });
    
    childProcess.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Comando falhou com c√≥digo ${code}: ${comando}`));
      }
    });
  });
}

// Verificar se um programa est√° instalado
async function verificarInstalacao(programa) {
  try {
    await execPromise(`which ${programa} || command -v ${programa}`);
    return true;
  } catch (error) {
    return false;
  }
}

// Instalar depend√™ncias do sistema
async function instalarDependenciasSistema() {
  console.log('\nüîß Verificando e instalando depend√™ncias do sistema...');
  
  try {
    // Atualizar reposit√≥rios
    console.log('üì¶ Atualizando reposit√≥rios...');
    await executarComando('apt-get update');
    
    // Instalar depend√™ncias b√°sicas
    console.log('üì¶ Instalando depend√™ncias b√°sicas...');
    await executarComando('apt-get install -y curl wget gnupg git build-essential');
    
    // Verificar se Node.js est√° instalado
    const nodeInstalado = await verificarInstalacao('node');
    if (!nodeInstalado) {
      console.log('üì¶ Instalando Node.js e npm...');
      // Usar NodeSource para obter vers√£o LTS do Node.js (v18.x)
      await executarComando('curl -fsSL https://deb.nodesource.com/setup_18.x | bash -');
      await executarComando('apt-get install -y nodejs');
      
      // Verificar instala√ß√£o
      await executarComando('node --version');
      await executarComando('npm --version');
    } else {
      console.log('‚úÖ Node.js j√° est√° instalado');
    }
    
    // Verificar se PostgreSQL est√° instalado
    const postgresInstalado = await verificarInstalacao('psql');
    if (!postgresInstalado) {
      console.log('üì¶ Instalando PostgreSQL...');
      await executarComando('apt-get install -y postgresql postgresql-contrib');
      
      // Iniciar servi√ßo PostgreSQL
      await executarComando('systemctl start postgresql');
      await executarComando('systemctl enable postgresql');
    } else {
      console.log('‚úÖ PostgreSQL j√° est√° instalado');
    }
    
    // Instalar PM2 globalmente
    console.log('üì¶ Instalando PM2...');
    await executarComando('npm install -g pm2');
    
    console.log('‚úÖ Todas as depend√™ncias do sistema foram instaladas com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao instalar depend√™ncias:', error.message);
    
    // Tentar instala√ß√£o manual de Node.js em caso de falha
    const continuar = await pergunta('\n‚ö†Ô∏è Houve um erro na instala√ß√£o autom√°tica. Deseja tentar a instala√ß√£o manual do Node.js? (s/n): ');
    if (continuar.toLowerCase() === 's') {
      console.log('\nSiga estas instru√ß√µes para instalar o Node.js manualmente:');
      console.log('1. Execute: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash');
      console.log('2. Feche e reabra o terminal, ou execute: source ~/.bashrc');
      console.log('3. Execute: nvm install 18');
      console.log('4. Reinicie este script ap√≥s a instala√ß√£o manual\n');
      
      const prosseguir = await pergunta('Deseja prosseguir mesmo sem todas as depend√™ncias? (s/n): ');
      return prosseguir.toLowerCase() === 's';
    }
    return false;
  }
}

// Verificar e configurar PostgreSQL
async function configurarPostgreSQL(dbUser, dbPassword, dbName) {
  console.log('\nüóÑÔ∏è Configurando PostgreSQL...');
  
  try {
    // Verificar se o usu√°rio j√° existe
    const userExists = await execPromise(`sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${dbUser}'"`)
      .then(({ stdout }) => stdout.trim() === '1')
      .catch(() => false);
    
    if (!userExists) {
      console.log(`Criando usu√°rio ${dbUser}...`);
      await executarComando(`sudo -u postgres psql -c "CREATE USER ${dbUser} WITH PASSWORD '${dbPassword}'"`);
    }
    
    // Verificar se o banco de dados j√° existe
    const dbExists = await execPromise(`sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='${dbName}'"`)
      .then(({ stdout }) => stdout.trim() === '1')
      .catch(() => false);
    
    if (!dbExists) {
      console.log(`Criando banco de dados ${dbName}...`);
      await executarComando(`sudo -u postgres psql -c "CREATE DATABASE ${dbName} OWNER ${dbUser}"`);
    }
    
    // Garantir privil√©gios
    await executarComando(`sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${dbName} TO ${dbUser}"`);
    
    console.log('‚úÖ PostgreSQL configurado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao configurar PostgreSQL:', error.message);
    console.log('‚ö†Ô∏è Voc√™ precisar√° configurar o PostgreSQL manualmente.');
    
    const prosseguir = await pergunta('Deseja prosseguir mesmo sem a configura√ß√£o do PostgreSQL? (s/n): ');
    return prosseguir.toLowerCase() === 's';
  }
}

// Verificar se um dom√≠nio tem registros DNS v√°lidos
async function verificarDNS(dominio) {
  console.log(`üîç Verificando registros DNS para ${dominio}...`);
  try {
    const { stdout } = await execPromise(`dig +short ${dominio}`);
    if (stdout && stdout.trim()) {
      console.log(`‚úÖ Dom√≠nio ${dominio} tem registros DNS v√°lidos: ${stdout.trim()}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è Dom√≠nio ${dominio} n√£o tem registros DNS!`);
      return false;
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è N√£o foi poss√≠vel verificar registros DNS para ${dominio}: ${error.message}`);
    return false;
  }
}

// Configurar Nginx e SSL com Certbot
async function configurarDominio(frontendUrl, backendUrl, frontendPort, backendPort, email) {
  console.log('\nüîí Configurando Nginx e SSL para seus dom√≠nios...');
  
  try {
    // Extrair nomes de dom√≠nio para verifica√ß√£o antecipada
    const frontendDomain = new URL(frontendUrl).hostname;
    const backendDomain = new URL(backendUrl).hostname;
    
    // Verificar registros DNS antes de prosseguir
    const frontendDNSOk = await verificarDNS(frontendDomain);
    const backendDNSOk = await verificarDNS(backendDomain);
    
    if (!frontendDNSOk || !backendDNSOk) {
      console.log("\n‚ö†Ô∏è AVISO: Um ou mais dom√≠nios n√£o t√™m registros DNS v√°lidos!");
      console.log("Isso impedir√° a configura√ß√£o correta do SSL com o Let's Encrypt.");
      
      const continuar = await pergunta("Deseja continuar sem configurar SSL? Voc√™ poder√° configurar SSL manualmente mais tarde. (s/n): ");
      if (continuar.toLowerCase() !== 's') {
        console.log("üõë Configura√ß√£o de dom√≠nio cancelada pelo usu√°rio.");
        return false;
      }

      // Se o usu√°rio optar por continuar sem SSL, definimos uma flag
      var ignorarSSL = true;
    }
    
    // Verificar se as portas necess√°rias est√£o livres
    console.log('üîç Verificando portas utilizadas...');
    try {
      const { stdout: portCheck } = await execPromise('netstat -tuln | grep ":80\\s"');
      if (portCheck) {
        console.log('‚ö†Ô∏è A porta 80 j√° est√° em uso por outro servi√ßo:');
        console.log(portCheck);
        
        // Verificar se √© Docker que est√° usando a porta
        const { stdout: dockerCheck } = await execPromise('lsof -i :80 | grep docker');
        if (dockerCheck) {
          console.log('‚ö†Ô∏è Docker est√° usando a porta 80. Isso pode causar conflitos.');
          
          const pararDocker = await pergunta('Deseja parar o Docker para liberar a porta 80? (s/n): ');
          if (pararDocker.toLowerCase() === 's') {
            console.log('üõë Parando Docker...');
            await executarComando('systemctl stop docker');
            await executarComando('systemctl stop docker.socket');
          } else {
            // Se o Docker n√£o for parado, necess√°rio usar outra porta para o Nginx
            console.log('‚ö†Ô∏è O Nginx n√£o poder√° usar a porta 80. A configura√ß√£o de SSL pode falhar.');
            console.log('Recomendamos parar o Docker temporariamente ou configurar manualmente depois.');
            
            const prosseguir = await pergunta('Deseja prosseguir mesmo assim? (s/n): ');
            if (prosseguir.toLowerCase() !== 's') {
              console.log("üõë Configura√ß√£o de dom√≠nio cancelada pelo usu√°rio.");
              return false;
            }
            
            // Se o usu√°rio escolher prosseguir, tamb√©m ignoramos SSL
            ignorarSSL = true;
          }
        } else {
          // Tentar identificar o servi√ßo que est√° usando a porta 80
          const { stdout: pidInfo } = await execPromise("lsof -i :80 | grep LISTEN");
          if (pidInfo) {
            console.log('Processo utilizando a porta 80:');
            console.log(pidInfo);
            
            const serviceName = await pergunta('Deseja parar o servi√ßo que est√° usando a porta 80? (s/n): ');
            if (serviceName.toLowerCase() === 's') {
              // Tentar parar servi√ßos comuns
              console.log('Tentando parar servi√ßos comuns que usam a porta 80...');
              await executarComando('systemctl stop apache2 2>/dev/null || true');
              await executarComando('systemctl stop httpd 2>/dev/null || true');
              
              // Verificar se a porta foi liberada
              try {
                const { stdout: checkAgain } = await execPromise('netstat -tuln | grep ":80\\s"');
                if (checkAgain) {
                  console.log('‚ö†Ô∏è A porta 80 ainda est√° em uso. Tentando identificar o PID do processo...');
                  const { stdout: pidOutput } = await execPromise("lsof -i :80 | grep LISTEN | awk '{print $2}'");
                  if (pidOutput) {
                    const pid = pidOutput.trim();
                    const matarProcesso = await pergunta(`Deseja encerrar o processo com PID ${pid}? (s/n): `);
                    if (matarProcesso.toLowerCase() === 's') {
                      await executarComando(`kill -9 ${pid}`);
                      console.log(`‚úÖ Processo ${pid} encerrado`);
                    } else {
                      ignorarSSL = true;
                    }
                  }
                } else {
                  console.log('‚úÖ Porta 80 liberada com sucesso!');
                }
              } catch (e) {
                // Se ocorrer um erro, provavelmente a porta foi liberada
                console.log('‚úÖ Porta 80 parece estar liberada agora');
              }
            } else {
              // Se o usu√°rio optar por n√£o parar o servi√ßo, ignoramos SSL
              ignorarSSL = true;
            }
          }
        }
      } else {
        console.log('‚úÖ Porta 80 est√° livre para o Nginx');
      }
    } catch (e) {
      // Erro ao verificar portas, provavelmente a porta est√° livre
      console.log('‚úÖ Porta 80 parece estar dispon√≠vel');
    }
    
    // Verificar se Nginx est√° instalado
    const nginxInstalado = await verificarInstalacao('nginx');
    if (!nginxInstalado) {
      console.log('üì¶ Instalando Nginx...');
      await executarComando('apt-get install -y nginx');
    } else {
      console.log('‚úÖ Nginx j√° est√° instalado');
      
      // Tentar parar e reiniciar o Nginx para garantir que ele esteja em um estado limpo
      console.log('üîÑ Parando Nginx para garantir configura√ß√£o limpa...');
      await executarComando('systemctl stop nginx');
    }
    
    // Limpar configura√ß√µes anteriores para os mesmos dom√≠nios
    console.log('üßπ Verificando se j√° existem configura√ß√µes para estes dom√≠nios...');
    const configsExistentes = await execPromise('ls -la /etc/nginx/sites-available/');
    
    if (configsExistentes.stdout.includes(frontendDomain) || configsExistentes.stdout.includes(backendDomain)) {
      console.log('‚ö†Ô∏è Encontradas configura√ß√µes de dom√≠nio anteriores. Removendo...');
      await executarComando(`rm -f /etc/nginx/sites-available/*${frontendDomain}* 2>/dev/null || true`);
      await executarComando(`rm -f /etc/nginx/sites-enabled/*${frontendDomain}* 2>/dev/null || true`);
      await executarComando(`rm -f /etc/nginx/sites-available/*${backendDomain}* 2>/dev/null || true`);
      await executarComando(`rm -f /etc/nginx/sites-enabled/*${backendDomain}* 2>/dev/null || true`);
    }
    
    // Remover configura√ß√µes padr√£o que possam interferir
    console.log('üßπ Removendo configura√ß√µes padr√£o do Nginx...');
    await executarComando('rm -f /etc/nginx/sites-enabled/default');
    
    // Verificar se Certbot est√° instalado (apenas se n√£o ignorar SSL)
    if (!ignorarSSL) {
      const certbotInstalado = await verificarInstalacao('certbot');
      if (!certbotInstalado) {
        console.log('üì¶ Instalando Certbot...');
        await executarComando('apt-get remove certbot');
        
        // Verificar se snap est√° instalado
        const snapInstalado = await verificarInstalacao('snap');
        if (!snapInstalado) {
          console.log('üì¶ Instalando Snap...');
          await executarComando('apt-get install -y snapd');
          await executarComando('systemctl enable --now snapd.socket');
        }
        
        await executarComando('snap install --classic certbot');
        await executarComando('ln -sf /snap/bin/certbot /usr/bin/certbot');
      }
    }
    
    // Configurar Nginx para tamanho m√°ximo de upload
    console.log('‚öôÔ∏è Configurando Nginx para uploads grandes...');
    const configNginx = `client_max_body_size 100M;`;
    fs.writeFileSync('/etc/nginx/conf.d/clint-dashboard.conf', configNginx);
    
    // Criar configura√ß√£o Nginx para o backend
    console.log(`üîß Configurando Nginx para o backend (${backendDomain})...`);
    const configBackend = `server {
  server_name ${backendDomain};
  
  location / {
    proxy_pass http://127.0.0.1:${backendPort};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
  }
}`;
    
    fs.writeFileSync('/etc/nginx/sites-available/clint-backend', configBackend);
    
    // Criar link simb√≥lico para habilitar o site backend
    await executarComando('ln -sf /etc/nginx/sites-available/clint-backend /etc/nginx/sites-enabled');
    
    // Criar configura√ß√£o Nginx para o frontend
    console.log(`üîß Configurando Nginx para o frontend (${frontendDomain})...`);
    const configFrontend = `server {
  server_name ${frontendDomain};
  
  location / {
    proxy_pass http://127.0.0.1:${frontendPort};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
  }
}`;
    
    fs.writeFileSync('/etc/nginx/sites-available/clint-frontend', configFrontend);
    
    // Criar link simb√≥lico para habilitar o site frontend
    await executarComando('ln -sf /etc/nginx/sites-available/clint-frontend /etc/nginx/sites-enabled');
    
    // Verificar configura√ß√£o do Nginx antes de reiniciar
    console.log('‚úÖ Testando configura√ß√£o do Nginx...');
    await executarComando('nginx -t');
    
    // Reiniciar Nginx
    console.log('üîÑ Reiniciando Nginx...');
    await executarComando('systemctl restart nginx');
    
    // Verificar se Nginx est√° rodando
    try {
      const { stdout: nginxStatus } = await execPromise('systemctl is-active nginx');
      if (nginxStatus.trim() !== 'active') {
        throw new Error('Nginx n√£o est√° rodando ap√≥s reiniciar');
      }
      console.log('‚úÖ Nginx reiniciado com sucesso!');
    } catch (e) {
      console.error('‚ö†Ô∏è Nginx n√£o est√° rodando. Tentando iniciar...');
      await executarComando('systemctl start nginx');
    }
    
    // Configurar SSL com Certbot apenas se n√£o estiver ignorando SSL
    if (!ignorarSSL) {
      console.log('üîí Configurando certificados SSL com Certbot...');
      if (frontendDomain === backendDomain) {
        // Se for o mesmo dom√≠nio, configurar apenas uma vez
        await executarComando(`certbot --nginx --agree-tos --non-interactive -m ${email} --domains ${frontendDomain}`);
      } else {
        // Se forem dom√≠nios diferentes, configurar ambos
        await executarComando(`certbot --nginx --agree-tos --non-interactive -m ${email} --domains ${frontendDomain},${backendDomain}`);
      }
      console.log('‚úÖ Configura√ß√£o SSL conclu√≠da com sucesso!');
    } else {
      console.log('‚ö†Ô∏è Configura√ß√£o SSL ignorada devido a problemas detectados.');
      console.log('Voc√™ poder√° configurar SSL manualmente mais tarde usando:');
      console.log(`sudo certbot --nginx -d ${frontendDomain} -d ${backendDomain}`);
    }
    
    console.log('‚úÖ Dom√≠nios configurados com sucesso!');
    
    // Criar entrada no hosts local para facilitar testes
    const configurarHosts = await pergunta('\nDeseja adicionar entradas no arquivo /etc/hosts para testes locais? (s/n): ');
    if (configurarHosts.toLowerCase() === 's') {
      console.log('üìù Adicionando entradas ao arquivo /etc/hosts...');
      await executarComando(`grep -q "${frontendDomain}" /etc/hosts || echo "127.0.0.1 ${frontendDomain}" >> /etc/hosts`);
      await executarComando(`grep -q "${backendDomain}" /etc/hosts || echo "127.0.0.1 ${backendDomain}" >> /etc/hosts`);
      console.log('‚úÖ Entradas adicionadas ao arquivo /etc/hosts');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao configurar dom√≠nios:', error.message);
    console.log('‚ö†Ô∏è Voc√™ precisar√° configurar os dom√≠nios manualmente.');
    
    // Tentar detectar e resolver problemas de configura√ß√£o do Nginx
    try {
      console.log('\nüîç Verificando erros na configura√ß√£o do Nginx...');
      const { stdout } = await execPromise('nginx -t');
      console.log('Resultado do teste de configura√ß√£o:', stdout);
      
      console.log('\nüìã Verificando status do Nginx:');
      await executarComando('systemctl status nginx');
      
      console.log('\nüõ†Ô∏è Executando diagn√≥stico adicional:');
      console.log('Verificando portas utilizadas:');
      await executarComando('netstat -tuln | grep ":80\\|:443"');
      
      console.log('\nVerificando processos que usam as portas Web:');
      await executarComando('lsof -i :80 -i :443');
      
      console.log('\nVerificando logs de erro do Nginx:');
      await executarComando('tail -n 50 /var/log/nginx/error.log');
      
      console.log('\nVerificando se os dom√≠nios apontam para este servidor:');
      await executarComando(`dig +short ${new URL(frontendUrl).hostname}`);
      await executarComando(`dig +short ${new URL(backendUrl).hostname}`);
      
    } catch (e) {
      console.log('N√£o foi poss√≠vel realizar diagn√≥stico completo:', e.message);
    }
    
    console.log('\nüìã Instru√ß√µes para configura√ß√£o manual:');
    console.log('1. Verifique qual servi√ßo est√° usando a porta 80:');
    console.log('   sudo lsof -i :80');
    console.log('2. Pare o servi√ßo que est√° usando a porta 80:');
    console.log('   sudo systemctl stop [nome-do-servi√ßo]');
    console.log(`3. Edite /etc/nginx/sites-available/clint-frontend e configure para o dom√≠nio ${new URL(frontendUrl).hostname}`);
    console.log(`4. Edite /etc/nginx/sites-available/clint-backend e configure para o dom√≠nio ${new URL(backendUrl).hostname}`);
    console.log('5. Verifique erros: sudo nginx -t');
    console.log('6. Reinicie o Nginx: sudo systemctl restart nginx');
    console.log('7. Configure SSL: sudo certbot --nginx');
    console.log('\n8. Verifique se seus dom√≠nios t√™m registros DNS apontando para este servidor:');
    console.log(`   dig +short ${new URL(frontendUrl).hostname}`);
    console.log(`   dig +short ${new URL(backendUrl).hostname}`);
    
    // Perguntar se deseja criar configura√ß√£o alternativa para IP em vez de dom√≠nio
    const usarIP = await pergunta('\nDeseja configurar o acesso por IP at√© que os dom√≠nios estejam dispon√≠veis? (s/n): ');
    if (usarIP.toLowerCase() === 's') {
      try {
        // Obter IP do servidor
        const { stdout: ipAddr } = await execPromise("hostname -I | awk '{print $1}'");
        const serverIP = ipAddr.trim();
        
        console.log(`üîß Configurando Nginx para acesso direto por IP (${serverIP})...`);
        
        // Criar configura√ß√£o simples para acesso direto por IP
        const configIP = `server {
  listen 80;
  server_name ${serverIP};
  
  location / {
    proxy_pass http://127.0.0.1:${new URL(frontendUrl).port || 3000};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
  }
}

server {
  listen 80;
  server_name ${serverIP}:${new URL(backendUrl).port || 3001};
  
  location / {
    proxy_pass http://127.0.0.1:${new URL(backendUrl).port || 3001};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
  }
}`;
        
        fs.writeFileSync('/etc/nginx/sites-available/clint-ip-access', configIP);
        await executarComando('ln -sf /etc/nginx/sites-available/clint-ip-access /etc/nginx/sites-enabled');
        
        // Testar e reiniciar Nginx
        await executarComando('nginx -t');
        await executarComando('systemctl restart nginx');
        
        console.log(`‚úÖ Configura√ß√£o por IP conclu√≠da. Voc√™ pode acessar:`);
        console.log(`Frontend: http://${serverIP}`);
        console.log(`Backend: http://${serverIP}:${new URL(backendUrl).port || 3001}`);
      } catch (ipError) {
        console.error('‚ùå Erro ao configurar acesso por IP:', ipError.message);
      }
    }
    
    const prosseguir = await pergunta('Deseja prosseguir mesmo sem a configura√ß√£o de dom√≠nios? (s/n): ');
    return prosseguir.toLowerCase() === 's';
  }
}

// Fun√ß√£o para criar scripts para Debian/Ubuntu
async function criarScriptsDebian() {
  console.log('\nüìù Criando scripts de build para Debian/Ubuntu...');
  
  try {
    // Criar backup do vite.config.js
    console.log('üìù Criando backup do vite.config.js...');
    if (fs.existsSync(path.join(__dirname, 'vite.config.js'))) {
      fs.copyFileSync(
        path.join(__dirname, 'vite.config.js'),
        path.join(__dirname, 'vite.config.js.backup')
      );
    }
    
    // Criar script de build direto
    console.log('üìù Criando script de build direto...');
    const buildScript = `#!/bin/bash
export NODE_OPTIONS=--openssl-legacy-provider
npx vite build
`;
    fs.writeFileSync(path.join(__dirname, 'build.sh'), buildScript);
    await executarComando('chmod +x build.sh');
    
    // Criar script node-build.js
    console.log('üìù Criando patch para crypto...');
    const nodeBuildScript = `const { exec } = require('child_process');

console.log('üî® Iniciando build com configura√ß√µes para Debian/Ubuntu...');

// Definir vari√°veis de ambiente
process.env.NODE_OPTIONS = '--openssl-legacy-provider';

// Executar build
const buildProcess = exec('npx vite build', (error, stdout, stderr) => {
  if (error) {
    console.error(\`‚ùå Erro durante o build: \${error.message}\`);
    return;
  }
  
  if (stderr) {
    console.log(\`Build warnings: \${stderr}\`);
  }
  
  console.log(stdout);
  console.log('‚úÖ Build conclu√≠do com sucesso!');
});

buildProcess.stdout.on('data', (data) => {
  process.stdout.write(data);
});

buildProcess.stderr.on('data', (data) => {
  process.stderr.write(data);
});
`;
    fs.writeFileSync(path.join(__dirname, 'node-build.js'), nodeBuildScript);
    
    // Atualizar vite.config.js para resolver problemas de crypto no Debian
    if (fs.existsSync(path.join(__dirname, 'vite.config.js'))) {
      console.log('üìù Atualizando vite.config.js...');
      let viteConfig = fs.readFileSync(path.join(__dirname, 'vite.config.js'), 'utf8');
      
      // Verificar se j√° tem a configura√ß√£o resolve
      if (!viteConfig.includes('resolve:')) {
        // Adicionar configura√ß√£o para crypto-browserify
        viteConfig = viteConfig.replace(
          'export default defineConfig({',
          `export default defineConfig({
  resolve: {
    alias: {
      crypto: 'crypto-browserify',
      stream: 'stream-browserify',
      assert: 'assert',
      buffer: 'buffer',
      process: 'process',
      util: 'util'
    }
  },`
        );
        
        fs.writeFileSync(path.join(__dirname, 'vite.config.js'), viteConfig);
        console.log('‚úÖ vite.config.js atualizado');
      }
    }
    
    console.log('üéâ Todas as corre√ß√µes foram aplicadas!');
    console.log('\nüöÄ Agora voc√™ pode executar o build usando:');
    console.log('   ./build.sh');
    console.log('   ou');
    console.log('   node node-build.js');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao criar scripts de build:', error.message);
    return false;
  }
}

// Criar usu√°rio com privil√©gios sudo
async function criarUsuarioSudo() {
  console.log('\nüë§ Configurando usu√°rio administrador...');
  
  try {
    const username = await pergunta('Nome do usu√°rio sudo a ser criado: ');
    
    if (!username || username.trim() === '') {
      console.log('‚ö†Ô∏è Nome de usu√°rio inv√°lido, pulando cria√ß√£o de usu√°rio.');
      return false;
    }
    
    // Verificar se o usu√°rio j√° existe
    try {
      const { stdout } = await execPromise(`id ${username} &>/dev/null && echo "exists" || echo "not exists"`);
      if (stdout.trim() === 'exists') {
        console.log(`‚ö†Ô∏è Usu√°rio ${username} j√° existe. Deseja pular ou reconfigurar?`);
        const pular = await pergunta('Pular cria√ß√£o de usu√°rio? (s/n) [s]: ') || 's';
        if (pular.toLowerCase() === 's') {
          console.log('‚úÖ Usando usu√°rio existente');
          return true;
        }
      }
    } catch (e) {
      // Usu√°rio n√£o existe, prosseguir com a cria√ß√£o
    }
    
    // Criar senha segura para o novo usu√°rio
    const senha = await pergunta('Senha para o novo usu√°rio: ');
    if (!senha || senha.length < 6) {
      console.log('‚ö†Ô∏è A senha deve ter pelo menos 6 caracteres!');
      return await criarUsuarioSudo();
    }
    
    // Confirmar senha
    const confirmaSenha = await pergunta('Confirme a senha: ');
    if (senha !== confirmaSenha) {
      console.log('‚ö†Ô∏è As senhas n√£o coincidem!');
      return await criarUsuarioSudo();
    }
    
    // Criar o usu√°rio
    console.log(`üìù Criando usu√°rio ${username}...`);
    await executarComando(`useradd -m -s /bin/bash ${username}`);
    
    // Definir senha para o usu√°rio (de forma segura)
    console.log('üîê Configurando senha...');
    const comandoSenha = `echo "${username}:${senha}" | chpasswd`;
    await executarComando(comandoSenha);
    
    // Adicionar usu√°rio ao grupo sudo
    console.log('üîë Adicionando ao grupo sudo...');
    await executarComando(`usermod -aG sudo ${username}`);
    
    // Permitir sudo sem senha (opcional)
    const sudoSemSenha = await pergunta('Permitir sudo sem senha? (s/n) [n]: ') || 'n';
    if (sudoSemSenha.toLowerCase() === 's') {
      console.log('üìù Configurando sudo sem senha...');
      await executarComando(`echo "${username} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${username}`);
      await executarComando(`chmod 0440 /etc/sudoers.d/${username}`);
    }
    
    console.log(`‚úÖ Usu√°rio ${username} criado com privil√©gios sudo!`);
    console.log(`üîë Voc√™ pode fazer login com: ssh ${username}@seu-servidor`);
    
    // Copiar o script para o diret√≥rio do novo usu√°rio
    if (fs.existsSync(__filename)) {
      console.log(`üìÑ Copiando script de configura√ß√£o para o diret√≥rio do usu√°rio ${username}...`);
      const destDir = `/home/${username}`;
      const scriptName = path.basename(__filename);
      await executarComando(`cp ${__filename} ${destDir}/${scriptName}`);
      await executarComando(`chown ${username}:${username} ${destDir}/${scriptName}`);
      console.log(`‚úÖ Script copiado para ${destDir}/${scriptName}`);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error.message);
    const continuar = await pergunta('Tentar novamente? (s/n): ');
    if (continuar.toLowerCase() === 's') {
      return await criarUsuarioSudo();
    }
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    // Verificar permiss√µes de superusu√°rio
    const ehRoot = process.getuid && process.getuid() === 0;
    if (!ehRoot) {
      console.log('‚ö†Ô∏è Este script precisa ser executado como superusu√°rio para instalar depend√™ncias.');
      console.log('Por favor, execute como: sudo node setup-alt.js');
      
      const continuar = await pergunta('Deseja tentar continuar mesmo sem permiss√µes de superusu√°rio? (s/n): ');
      if (continuar.toLowerCase() !== 's') {
        rl.close();
        return;
      }
    } else {
      // Perguntar se deseja criar um usu√°rio com privil√©gios sudo
      const criarUsuario = await pergunta('\n‚öôÔ∏è Deseja criar um usu√°rio com privil√©gios sudo? (s/n) [s]: ') || 's';
      if (criarUsuario.toLowerCase() === 's') {
        await criarUsuarioSudo();
      }
    }
    
    // Instalar depend√™ncias do sistema
    const dependenciasOk = await instalarDependenciasSistema();
    if (!dependenciasOk) {
      console.log('‚ùå Instala√ß√£o cancelada devido a problemas com as depend√™ncias.');
      rl.close();
      return;
    }
    
    console.log('\n‚öôÔ∏è Configura√ß√£o do sistema');
    
    // Configura√ß√£o de URL para frontend e backend
    console.log('\nüåê Configura√ß√£o de URLs:');
    console.log('Voc√™ pode configurar o frontend e backend em URLs diferentes se necess√°rio.');
    
    // Frontend
    const frontendUrlBase = await pergunta(`URL base do Frontend (IP ou dom√≠nio sem http://) [localhost]: `) || 'localhost';
    const portaFrontend = await pergunta(`Porta do Frontend [3000]: `) || '3000';
    const usarHttps = await pergunta(`Usar HTTPS para os dom√≠nios? (s/n) [s]: `) || 's';
    const protocolo = usarHttps.toLowerCase() === 's' ? 'https' : 'http';
    
    // Backend
    console.log('\nüñ•Ô∏è Configura√ß√£o do Backend:');
    console.log('O Backend e API podem estar em um servidor diferente do Frontend.');
    const backendUrlBase = await pergunta(`URL base do Backend (IP ou dom√≠nio sem http://) [${frontendUrlBase}]: `) || frontendUrlBase;
    const portaBackend = await pergunta(`Porta do Backend [3001]: `) || '3001';
    
    // Gerar URLs completas
    const config = {
      frontend_url: `${protocolo}://${frontendUrlBase}`,
      backend_url: `${protocolo}://${backendUrlBase}`,
      port: portaBackend,
      frontend_port: portaFrontend,
      backend_port: portaBackend,
      node_env: 'production'
    };
    
    // Definir API URL automaticamente
    config.api_url = `${config.backend_url}/api`;
    
    // Banco de dados
    console.log('\nüìä Configura√ß√£o do banco de dados PostgreSQL:');
    config.db_host = await pergunta(`Host do banco de dados [localhost]: `) || 'localhost';
    config.db_user = await pergunta(`Usu√°rio do PostgreSQL [postgres]: `) || 'postgres';
    config.db_password = await pergunta(`Senha do PostgreSQL [postgres]: `) || 'postgres';
    config.db_port = await pergunta(`Porta do PostgreSQL [5432]: `) || '5432';
    config.db_name = await pergunta(`Nome do banco de dados [clint_db]: `) || 'clint_db';
    
    // Configurar PostgreSQL se for local
    if (config.db_host === 'localhost' || config.db_host === '127.0.0.1') {
      const postgresOk = await configurarPostgreSQL(config.db_user, config.db_password, config.db_name);
      if (!postgresOk) {
        console.log('‚ö†Ô∏è Prosseguindo sem configura√ß√£o completa do PostgreSQL');
      }
    }
    
    // Credenciais API Clint
    config.clint_email = 'alberto@shortmidia.com.br';
    config.clint_senha = 'zenkaJ-jyghyg-gojqo0';
    config.clint_token = 'U2FsdGVkX1++EGmKUX1DI+e5KAB399FRzzdz50p/pzZg9E6jco79favQHXzIct2fZg5Vop+5UEct0XnXfAbzmA==';
    
    // Perguntar se quer configurar Nginx e SSL
    if (usarHttps.toLowerCase() === 's' && (frontendUrlBase !== 'localhost' && backendUrlBase !== 'localhost')) {
      const configurarSSL = await pergunta('\nDeseja configurar Nginx e certificados SSL automaticamente? (s/n) [s]: ') || 's';
      
      if (configurarSSL.toLowerCase() === 's') {
        const email = await pergunta('Email para registros de certificado SSL: ');
        const dominiosOk = await configurarDominio(
          config.frontend_url, 
          config.backend_url, 
          config.frontend_port, 
          config.backend_port,
          email
        );
        
        if (!dominiosOk) {
          console.log('‚ö†Ô∏è Prosseguindo sem configura√ß√£o completa de dom√≠nios');
        }
      }
    }
    
    // Resumo das configura√ß√µes
    console.log('\nüìù Resumo da configura√ß√£o:');
    console.log(`Frontend URL: ${config.frontend_url}`);
    console.log(`Backend URL: ${config.backend_url}`);
    console.log(`API URL: ${config.api_url}`);
    console.log(`Porta do servidor: ${config.port}`);
    console.log(`Database: PostgreSQL em ${config.db_host}:${config.db_port}/${config.db_name}`);
    
    if (frontendUrlBase !== backendUrlBase) {
      console.log(`\n‚ö†Ô∏è NOTA: Frontend e Backend est√£o em servidores diferentes.`);
      console.log(`Certifique-se de configurar CORS corretamente e que o frontend possa acessar o backend.`);
    }
    
    const confirma = await pergunta('\nAs configura√ß√µes est√£o corretas? (s/n): ');
    if (confirma.toLowerCase() !== 's') {
      rl.close();
      return main();
    }
    
    // Criar arquivo .env
    console.log('\nüìù Criando arquivo .env...');
    const envContent = `# Configura√ß√µes de ambiente do Clint Dashboard

# URLs
VITE_API_URL=${config.api_url}
VITE_BACKEND_URL=${config.backend_url}
BACKEND_URL=${config.backend_url}
FRONTEND_URL=${config.frontend_url}

# Portas locais para servi√ßos
FRONTEND_PORT=${config.frontend_port}
BACKEND_PORT=${config.backend_port}

# Banco de dados PostgreSQL
DB_HOST=${config.db_host}
DB_USER=${config.db_user}
DB_PASSWORD=${config.db_password}
DB_PORT=${config.db_port}
DB_NAME=${config.db_name}

# Configura√ß√µes do servidor
PORT=${config.port}
NODE_ENV=${config.node_env}

# Configura√ß√£o de CORS (para servidores frontend/backend separados)
CORS_ORIGIN=${config.frontend_url}

# Credenciais da API Clint
email=${config.clint_email}
senha=${config.clint_senha}
api-token=${config.clint_token}

# Configura√ß√£o do token autom√°tico (Playwright)
HEADLESS=true
TOKEN_TIMEOUT=3600
`;
    
    fs.writeFileSync(path.join(__dirname, '.env'), envContent);
    console.log('‚úÖ Arquivo .env criado com sucesso');
    
    // Executar o script principal
    console.log('\nüöÄ Executando instala√ß√£o do sistema...');
    
    try {
      // Instalar depend√™ncias
      console.log('\nüì¶ Instalando depend√™ncias...');
      await executarComando('npm install');
      
      // Detectar sistema operacional para tratamento espec√≠fico
      const platform = process.platform;
      let distro = '';
      
      if (platform === 'linux') {
        try {
          const { stdout } = await execPromise('cat /etc/os-release');
          if (stdout.includes('Ubuntu')) {
            distro = 'ubuntu';
          } else if (stdout.includes('Debian')) {
            distro = 'debian';
          } else {
            distro = 'linux';
          }
        } catch (error) {
          distro = 'linux';
        }
      }
      
      // Instalando depend√™ncias para Playwright
      console.log('\nüì¶ Instalando depend√™ncias para automa√ß√£o de token...');
      await executarComando('npm install playwright playwright-core');
      await executarComando('npx playwright install chromium');
      console.log('‚úÖ Playwright instalado com sucesso');
      
      // Instalando depend√™ncias Python para os scripts de automa√ß√£o
      console.log('\nüì¶ Verificando e instalando Python e depend√™ncias...');
      try {
        // Verificar se Python est√° instalado
        const { stdout: pythonVersion } = await execPromise('python3 --version || python --version');
        console.log(`Python detectado: ${pythonVersion.trim()}`);
        
        // Verificar se pip est√° instalado
        await execPromise('pip --version || pip3 --version');
        console.log('Pip detectado, instalando depend√™ncias Python...');
        
        // Instalar depend√™ncias do requirements.txt
        if (fs.existsSync(path.join(__dirname, 'requirements.txt'))) {
          await executarComando('pip install -r requirements.txt || pip3 install -r requirements.txt');
          console.log('‚úÖ Depend√™ncias Python instaladas com sucesso');
        } else {
          console.log('‚ö†Ô∏è Arquivo requirements.txt n√£o encontrado, pulando instala√ß√£o de depend√™ncias Python');
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao configurar Python: ${error.message}`);
        console.log('Voc√™ precisar√° instalar Python e as depend√™ncias manualmente para usar os scripts de automa√ß√£o');
      }
      
      // Compilar frontend com tratamento para Debian
      console.log('\nüî® Compilando front-end...');
      if (distro === 'debian' || distro === 'ubuntu') {
        console.log('Detectado sistema Debian/Ubuntu, aplicando corre√ß√µes espec√≠ficas...');
        
        // Criar scripts de build espec√≠ficos para Debian/Ubuntu
        await criarScriptsDebian();
        
        // Instalar depend√™ncias necess√°rias
        await executarComando('npm install --save crypto-browserify');
        await executarComando('npm install --save-dev cross-env stream-browserify assert buffer process util');
        
        // Executar o build com o script criado
        await executarComando('./build.sh');
      } else {
        await executarComando('npm run build');
      }
      
      // Configurar banco de dados
      const setupDbPath = path.join(__dirname, 'database', 'setup.js');
      if (fs.existsSync(setupDbPath)) {
        console.log('\nüóÑÔ∏è Configurando banco de dados...');
        // Atualizar arquivo setup.js com as credenciais configuradas
        let setupContent = fs.readFileSync(setupDbPath, 'utf8');
        setupContent = setupContent.replace(/host: '.*?',/, `host: '${config.db_host}',`);
        setupContent = setupContent.replace(/user: '.*?',/, `user: '${config.db_user}',`);
        setupContent = setupContent.replace(/password: '.*?',/, `password: '${config.db_password}',`);
        setupContent = setupContent.replace(/port: \d+/, `port: ${config.db_port}`);
        setupContent = setupContent.replace(/const dbName = '.*?';/, `const dbName = '${config.db_name}';`);
        fs.writeFileSync(setupDbPath, setupContent);
        
        // Corrigindo o caminho para o diret√≥rio database
        const databaseDir = path.join(__dirname, 'database');
        await executarComando('node setup.js', databaseDir);
      }
      
      // Iniciar servidor com PM2
      console.log('\nüöÄ Iniciando servidor com PM2...');
      
      // Iniciar ou reiniciar servidor
      try {
        const { stdout } = await execPromise('pm2 list');
        if (stdout.includes('clint-dashboard')) {
          await executarComando('pm2 reload clint-dashboard');
        } else {
          await executarComando(`pm2 start npm --name clint-dashboard -- run start`);
        }
        
        // Configurar inicializa√ß√£o autom√°tica com o sistema
        await executarComando('pm2 startup');
        
        // Salvar configura√ß√£o PM2
        await executarComando('pm2 save');
        
        // Mostrar status
        await executarComando('pm2 status');
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao configurar PM2:', error.message);
        console.log('Iniciando servidor diretamente...');
        console.log('Para iniciar manualmente, execute: node server.js');
      }
      
      console.log(`\n‚úÖ Sistema configurado e iniciado com sucesso!`);
      console.log(`\nüåê Frontend dispon√≠vel em: ${config.frontend_url}`);
      console.log(`üñ•Ô∏è Backend dispon√≠vel em: ${config.backend_url}`);
      console.log(`üîå API dispon√≠vel em: ${config.api_url}`);
      
      if (frontendUrlBase !== backendUrlBase) {
        console.log(`\n‚ö†Ô∏è IMPORTANTE: Como voc√™ configurou o frontend e backend em servidores diferentes,`);
        console.log(`   verifique se a configura√ß√£o CORS est√° funcionando corretamente.`);
        console.log(`   Se houver problemas de conex√£o entre frontend e backend, verifique:`);
        console.log(`   1. O firewall est√° permitindo conex√µes externas`);
        console.log(`   2. O servidor backend est√° configurado para aceitar requisi√ß√µes da URL frontend`);
      }
      
      console.log('\nüîí Configura√ß√£o de Firewall:');
      console.log(`Se voc√™ estiver usando UFW, execute os seguintes comandos para abrir as portas necess√°rias:`);
      console.log(`sudo ufw allow ${portaFrontend}/tcp`);
      console.log(`sudo ufw allow ${portaBackend}/tcp`);
    } catch (error) {
      console.error('‚ùå Erro durante a instala√ß√£o:', error.message);
    }
    
    // Fechar interface de readline ap√≥s a configura√ß√£o
    rl.close();
    
    console.log('\nüéâ Configura√ß√£o completa conclu√≠da!');
    
  } catch (error) {
    console.error('\n‚ùå Erro durante a configura√ß√£o:', error);
    rl.close();
    process.exit(1);
  }
}

// Executar fun√ß√£o principal
main(); 