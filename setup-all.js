/**
 * Script interativo para configurar todo o ambiente do Clint em uma VPS
 * Configura o frontend, backend e banco de dados PostgreSQL
 */

const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const readline = require('readline');

// Configura√ß√£o das perguntas interativas
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Promisificar a fun√ß√£o de pergunta
function pergunta(questao) {
  return new Promise((resolve) => {
    rl.question(questao, (resposta) => {
      resolve(resposta);
    });
  });
}

// Configura√ß√µes padr√£o
const config = {
  // URLs e portas
  frontend_url: 'http://localhost:3000',
  backend_url: 'http://localhost:3000',
  api_url: 'http://localhost:3000/api',
  port: '3000',
  
  // Banco de dados
  db_host: 'localhost',
  db_user: 'postgres',
  db_password: 'postgres',
  db_port: '5432',
  db_name: 'clint_db',
  
  // Configura√ß√µes gerais
  node_env: 'production'
};

console.log('üöÄ Iniciando configura√ß√£o do Sistema Clint para VPS');

// Fun√ß√£o para executar comando com promessa
function execPromise(cmd, options = {}) {
  return new Promise((resolve, reject) => {
    console.log(`\nüìã Executando: ${cmd}`);
    
    exec(cmd, options, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå Erro: ${error.message}`);
        return reject(error);
      }
      
      if (stderr) {
        console.log(`‚ö†Ô∏è Stderr: ${stderr}`);
      }
      
      if (stdout) {
        console.log(stdout);
      }
      
      console.log(`‚úÖ Comando conclu√≠do`);
      resolve(stdout);
    });
  });
}

// Fun√ß√£o para detectar o sistema operacional
async function detectarSistemaOperacional() {
  try {
    const platform = process.platform;
    console.log(`\nüñ•Ô∏è Sistema operacional detectado: ${platform}`);
    
    let distro = '';
    
    if (platform === 'linux') {
      try {
        const { stdout } = await execPromise('cat /etc/os-release');
        if (stdout.includes('Ubuntu')) {
          distro = 'ubuntu';
        } else if (stdout.includes('Debian')) {
          distro = 'debian';
        } else if (stdout.includes('CentOS') || stdout.includes('Red Hat')) {
          distro = 'centos';
        } else {
          distro = 'linux';
        }
      } catch (error) {
        distro = 'linux';
      }
    } else if (platform === 'win32') {
      distro = 'windows';
    } else if (platform === 'darwin') {
      distro = 'macos';
    }
    
    console.log(`Distribui√ß√£o detectada: ${distro}`);
    return { platform, distro };
  } catch (error) {
    console.error('Erro ao detectar sistema operacional:', error);
    return { platform: process.platform, distro: 'desconhecido' };
  }
}

// Fun√ß√£o para verificar depend√™ncias
async function verificarDependencias() {
  console.log('\nüîç Verificando depend√™ncias...');
  
  try {
    // Verificar Node.js
    await execPromise('node --version');
    
    // Verificar npm
    await execPromise('npm --version');
    
    // Verificar PostgreSQL
    try {
      await execPromise('psql --version');
      console.log('‚úÖ PostgreSQL encontrado');
      return true;
    } catch (error) {
      console.log('‚ö†Ô∏è PostgreSQL n√£o encontrado. Ser√° necess√°rio instalar.');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar depend√™ncias:', error);
    process.exit(1);
  }
}

// Fun√ß√£o para instalar PostgreSQL de acordo com a distribui√ß√£o
async function instalarPostgreSQL(distro) {
  console.log('\nüì¶ Instalando PostgreSQL...');
  
  try {
    if (distro === 'ubuntu' || distro === 'debian') {
      await execPromise('sudo apt-get update');
      await execPromise('sudo apt-get install -y postgresql postgresql-contrib');
    } else if (distro === 'centos') {
      await execPromise('sudo dnf -y install postgresql-server postgresql-contrib');
      await execPromise('sudo postgresql-setup --initdb');
      await execPromise('sudo systemctl start postgresql');
      await execPromise('sudo systemctl enable postgresql');
    } else if (distro === 'windows') {
      console.log('‚ö†Ô∏è Para Windows, voc√™ precisa instalar o PostgreSQL manualmente:');
      console.log('1. Acesse https://www.postgresql.org/download/windows/');
      console.log('2. Baixe e instale a vers√£o mais recente');
      console.log('3. Durante a instala√ß√£o, anote as credenciais configuradas');
      
      const confirma = await pergunta('Voc√™ j√° instalou o PostgreSQL? (s/n): ');
      if (confirma.toLowerCase() !== 's') {
        throw new Error('PostgreSQL precisa ser instalado manualmente no Windows');
      }
    } else {
      throw new Error(`Instala√ß√£o de PostgreSQL n√£o suportada para ${distro}`);
    }
    
    console.log('‚úÖ PostgreSQL instalado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao instalar PostgreSQL:', error);
    return false;
  }
}

// Fun√ß√£o para configurar PostgreSQL
async function configurarPostgreSQL() {
  console.log('\nüõ†Ô∏è Configurando PostgreSQL...');
  
  try {
    if (process.platform === 'linux') {
      // Definir senha para o usu√°rio postgres
      await execPromise(`sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '${config.db_password}';"`, {
        env: { ...process.env, PGPASSWORD: config.db_password }
      });
      
      // Iniciar PostgreSQL se n√£o estiver rodando
      await execPromise('sudo systemctl start postgresql');
    }
    
    console.log('‚úÖ PostgreSQL configurado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao configurar PostgreSQL:', error);
    return false;
  }
}

// Fun√ß√£o para instalar depend√™ncias
async function instalarDependencias() {
  console.log('\nüì¶ Instalando depend√™ncias principais...');
  
  try {
    // Instalar depend√™ncias principais
    await execPromise('npm install');
    
    // Instalar depend√™ncias do banco de dados
    console.log('\nüì¶ Instalando depend√™ncias do banco de dados...');
    
    // Verificar se o diret√≥rio database existe
    if (!fs.existsSync(path.join(__dirname, 'database'))) {
      console.log('Criando diret√≥rio database...');
      fs.mkdirSync(path.join(__dirname, 'database'));
    }
    
    // Verificar se o arquivo package.json do banco de dados existe
    if (!fs.existsSync(path.join(__dirname, 'database', 'package.json'))) {
      console.log('‚ö†Ô∏è Arquivo package.json do banco de dados n√£o encontrado. Pulando instala√ß√£o.');
    } else {
      await execPromise('npm install', {
        cwd: path.join(__dirname, 'database')
      });
    }
    
    console.log('‚úÖ Depend√™ncias instaladas com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao instalar depend√™ncias:', error);
    process.exit(1);
  }
}

// Fun√ß√£o para configurar arquivo .env
async function configurarEnv() {
  console.log('\nüìù Configurando arquivo .env...');
  
  try {
    // Gerar conte√∫do do .env
    const envContent = `# Configura√ß√µes de ambiente do Clint Dashboard

# URLs
VITE_API_URL=${config.api_url}
BACKEND_URL=${config.backend_url}

# Banco de dados PostgreSQL
DB_HOST=${config.db_host}
DB_USER=${config.db_user}
DB_PASSWORD=${config.db_password}
DB_PORT=${config.db_port}
DB_NAME=${config.db_name}

# Configura√ß√µes do servidor
PORT=${config.port}
NODE_ENV=${config.node_env}

# Credenciais da API Clint
email=${config.clint_email || 'alberto@shortmidia.com.br'}
senha=${config.clint_senha || 'zenkaJ-jyghyg-gojqo0'}
api-token=${config.clint_token || 'U2FsdGVkX1++EGmKUX1DI+e5KAB399FRzzdz50p/pzZg9E6jco79favQHXzIct2fZg5Vop+5UEct0XnXfAbzmA=='}
`;
    
    // Salvar arquivo .env
    fs.writeFileSync(path.join(__dirname, '.env'), envContent);
    
    console.log('‚úÖ Arquivo .env criado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao configurar .env:', error);
    process.exit(1);
  }
}

// Fun√ß√£o para configurar banco de dados
async function configurarBancoDados() {
  console.log('\nüóÑÔ∏è Configurando banco de dados...');
  
  try {
    // Verificar se o arquivo setup.js do banco de dados existe
    const setupPath = path.join(__dirname, 'database', 'setup.js');
    
    if (!fs.existsSync(setupPath)) {
      console.log('‚ö†Ô∏è Arquivo setup.js do banco de dados n√£o encontrado. Pulando configura√ß√£o.');
      return;
    }
    
    // Atualizar arquivo setup.js com as credenciais configuradas
    let setupContent = fs.readFileSync(setupPath, 'utf8');
    
    // Substituir configura√ß√µes de conex√£o
    setupContent = setupContent.replace(/host: '.*?',/, `host: '${config.db_host}',`);
    setupContent = setupContent.replace(/user: '.*?',/, `user: '${config.db_user}',`);
    setupContent = setupContent.replace(/password: '.*?',/, `password: '${config.db_password}',`);
    setupContent = setupContent.replace(/port: \d+/, `port: ${config.db_port}`);
    setupContent = setupContent.replace(/const dbName = '.*?';/, `const dbName = '${config.db_name}';`);
    
    // Salvar as altera√ß√µes
    fs.writeFileSync(setupPath, setupContent);
    
    // Executar script de configura√ß√£o
    await execPromise('node setup.js', {
      cwd: path.join(__dirname, 'database')
    });
    
    console.log('‚úÖ Banco de dados configurado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao configurar banco de dados:', error);
    console.log('‚ö†Ô∏è Continuando com a configura√ß√£o...');
  }
}

// Fun√ß√£o para compilar o front-end
async function compilarFrontend() {
  console.log('\nüî® Compilando front-end...');
  
  try {
    await execPromise('npm run build');
    console.log('‚úÖ Front-end compilado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao compilar front-end:', error);
    process.exit(1);
  }
}

// Fun√ß√£o para iniciar o servidor
async function iniciarServidor() {
  console.log('\nüöÄ Iniciando servidor...');
  
  if (process.platform === 'linux') {
    console.log('\nüìÑ Configurando systemd service para iniciar automaticamente...');
    
    // Criar arquivo de servi√ßo
    const serviceContent = `[Unit]
Description=Clint Dashboard
After=network.target

[Service]
Environment=NODE_ENV=production
Type=simple
User=root
ExecStart=/usr/bin/node ${path.join(__dirname, 'server.js')}
WorkingDirectory=${__dirname}
Restart=on-failure

[Install]
WantedBy=multi-user.target
`;
    
    // Salvar arquivo service
    const servicePath = '/etc/systemd/system/clint-dashboard.service';
    
    try {
      fs.writeFileSync('clint-dashboard.service', serviceContent);
      await execPromise('sudo mv clint-dashboard.service /etc/systemd/system/');
      await execPromise('sudo systemctl daemon-reload');
      await execPromise('sudo systemctl enable clint-dashboard');
      await execPromise('sudo systemctl start clint-dashboard');
      
      console.log('‚úÖ Servi√ßo systemd configurado e iniciado');
      console.log(`Para verificar status: sudo systemctl status clint-dashboard`);
      console.log(`Para parar: sudo systemctl stop clint-dashboard`);
      console.log(`Para reiniciar: sudo systemctl restart clint-dashboard`);
    } catch (error) {
      console.error('‚ö†Ô∏è Erro ao configurar servi√ßo systemd:', error);
      console.log('Iniciando servidor manualmente...');
      
      const servidor = spawn('node', ['server.js'], {
        stdio: 'inherit'
      });
      
      servidor.on('error', (error) => {
        console.error('‚ùå Erro ao iniciar servidor:', error);
      });
    }
  } else {
    const servidor = spawn('node', ['server.js'], {
      stdio: 'inherit'
    });
    
    servidor.on('error', (error) => {
      console.error('‚ùå Erro ao iniciar servidor:', error);
      process.exit(1);
    });
    
    servidor.on('exit', (code) => {
      if (code !== 0) {
        console.error(`‚ùå Servidor encerrado com c√≥digo ${code}`);
        process.exit(1);
      }
    });
  }
  
  console.log(`‚úÖ Sistema Clint configurado! Acesse: ${config.frontend_url}`);
}

// Fun√ß√£o para configura√ß√£o interativa
async function configuracaoInterativa() {
  console.log('\n‚öôÔ∏è Configura√ß√£o interativa do sistema');
  
  // URLs e portas
  config.frontend_url = await pergunta(`URL do frontend (${config.frontend_url}): `) || config.frontend_url;
  config.backend_url = await pergunta(`URL do backend (${config.backend_url}): `) || config.backend_url;
  config.api_url = await pergunta(`URL da API (${config.api_url}): `) || config.api_url;
  config.port = await pergunta(`Porta do servidor (${config.port}): `) || config.port;
  
  // Banco de dados
  console.log('\nüìä Configura√ß√£o do banco de dados PostgreSQL:');
  config.db_host = await pergunta(`Host do banco de dados (${config.db_host}): `) || config.db_host;
  config.db_user = await pergunta(`Usu√°rio do PostgreSQL (${config.db_user}): `) || config.db_user;
  config.db_password = await pergunta(`Senha do PostgreSQL (${config.db_password}): `) || config.db_password;
  config.db_port = await pergunta(`Porta do PostgreSQL (${config.db_port}): `) || config.db_port;
  config.db_name = await pergunta(`Nome do banco de dados (${config.db_name}): `) || config.db_name;
  
  // Credenciais Clint (opcionais)
  console.log('\nüîë Credenciais da API Clint (opcional, pressione Enter para manter padr√£o):');
  config.clint_email = await pergunta('Email: ');
  config.clint_senha = await pergunta('Senha: ');
  config.clint_token = await pergunta('API Token: ');
  
  // Revisar configura√ß√µes
  console.log('\nüìù Resumo da configura√ß√£o:');
  console.log(JSON.stringify(config, null, 2));
  
  const confirma = await pergunta('\nAs configura√ß√µes est√£o corretas? (s/n): ');
  if (confirma.toLowerCase() !== 's') {
    return configuracaoInterativa();
  }
  
  rl.close();
}

// Fun√ß√£o principal
async function main() {
  try {
    const { platform, distro } = await detectarSistemaOperacional();
    
    await configuracaoInterativa();
    
    const postgresqlInstalado = await verificarDependencias();
    
    if (!postgresqlInstalado) {
      await instalarPostgreSQL(distro);
      if (platform === 'linux') {
        await configurarPostgreSQL();
      }
    }
    
    await instalarDependencias();
    await configurarEnv();
    await configurarBancoDados();
    await compilarFrontend();
    await iniciarServidor();
    
    console.log('\nüéâ Instala√ß√£o conclu√≠da com sucesso!');
    console.log(`Acesse o sistema em: ${config.frontend_url}`);
    
  } catch (error) {
    console.error('\n‚ùå Erro durante a configura√ß√£o:', error);
    process.exit(1);
  }
}

// Executar fun√ß√£o principal
main(); 